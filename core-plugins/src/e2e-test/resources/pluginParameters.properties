projectId=cdf-athena
dataset=test_automation
csvFormat=csv

## GCS-PLUGIN-PROPERTIES
gcsSourceBucket1=dummy
gcsSourceBucket2=dummy
gcsTargetBucket=dummy

firstNameCsvFile=testdata/first_name.csv
lastNameCsvFile=testdata/last_name.csv
firstNameOutputSchema=[{"key":"id","value":"int"},{"key":"first_name","value":"string"}]
lastNameOutputSchema=[{"key":"id","value":"int"},{"key":"last_name","value":"string"}]
errorCollectorOutputSchema=[{"key":"id","value":"int"},{"key":"first_name","value":"string"},\
  {"key":"msg","value":"string"},{"key":"code","value":"int"},{"key":"node","value":"string"}]
joinerOutput=testdata/joiner_output.csv
errorCollectorOutput=testdata/error_collector_output.csv
expectedJoinerOutputPartitions=1
# Set the errorcollector partition to 0 since the plugin doesn't specify the output partition.
# By setting it to 0, all partitions will be combined and sorted during the verification process.
expectedErrorCollectorOutputPartitions=0
javascriptTransformScript=function transform(input, emitter, context) { \
                    if (input.id < 10) { \
                        emitter.emitError({ \
                            'errorCode': 1, \
                            'errorMsg': 'blacklisted id', \
                            'invalidRecord': input \
                        }); \
                        return \
                    } \
                }

## FILE-PLUGIN-PROPERTIES-START
incorrectFilePath=invalidPath
csvFile=testdata/file/CSV_TEST.csv
csvFileSchema=[{"key":"EmployeeDepartment","value":"string"},{"key":"Employeename","value":"string"},\
  {"key":"Salary","value":"int"},{"key":"workhours","value":"int"}]
csvFileOutputSchema={ "type": "record", "name": "text", "fields": [ \
  { "name": "EmployeeDepartment", "type": "string" }, { "name": "Employeename", "type": "string" }, \
  { "name": "Salary", "type": "int" }, { "name": "workhours", "type": "int" } ] }
csvNoHeaderFile=testdata/file/CSV_NO_HEADER_TEST.csv
csvNoHeaderFileSchema=[{"key":"body_0","value":"string"},{"key":"body_1","value":"string"},\
  {"key":"body_2","value":"int"},{"key":"body_3","value":"int"}]
csvAllDataTypeFile=testdata/file/CSV_DATATYPE_TEST_1.csv
csvAllDataTypeSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"isdeleted","value":"boolean"},{"key":"email","value":"string"},\
  {"key":"createddate","value":"datetime"},{"key":"revenue","value":"double"},{"key":"points","value":"decimal"},\
  {"key":"longdatatype","value":"long"},{"key":"doubledatatype","value":"double"},\
  {"key":"BytesData","value":"bytes"}]
csvAllDataTypeFileSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"isdeleted","value":"boolean"},{"key":"email","value":"string"},\
  {"key":"createddate","value":"string"},{"key":"revenue","value":"string"},{"key":"points","value":"string"},\
  {"key":"longdatatype","value":"long"},{"key":"doubledatatype","value":"double"},\
  {"key":"BytesData","value":"string"}]
tsvFile=testdata/file/TSV_TEST.tsv
tsvFileSchema=[{"key":"testscenarioid","value":"string"},{"key":"testdescription","value":"string"},\
  {"key":"testconditionid","value":"string"},{"key":"testtype","value":"string"}]
blobFile=testdata/file/BLOB_TEST.zip
blobFileSchema=[{"key":"body","value":"bytes"}]
delimitedFile=testdata/file/DELIMITED_TEST.txt
delimiter=@
incorrectDelimiter=#
delimitedFileSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"datatype","value":"long"},{"key":"tablename","value":"string"}]
textFile=testdata/file/TEXT_TEST.txt
textFileSchema=[{"key":"offset","value":"long"},{"key":"body","value":"string"}]
pathFieldTestFile=testdata/file/PATHFIELD_TEST.csv
outputPathField=pathFieldColumn
invalidOutputPathField=invalid
pathFieldTestFileSchema=[{"key":"id","value":"int"},{"key":"firstname","value":"string"},\
  {"key":"lastname","value":"string"},{"key":"photo","value":"string"},{"key":"outputfield","value":"string"}\
  ,{"key":"pathFieldColumn","value":"string"}]
overrideSchema=[{"key":"id","value":"float"},{"key":"firstname","value":"string"},\
  {"key":"lastname","value":"string"},{"key":"photo","value":"string"},{"key":"outputfield","value":"string"}]
invalidOverrideField=invalid
overrideFields=[{"key":"id","value":"float"}]
readRecursivePath=testdata/file/RECURSIVE_TEST
readRecursivePathSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"tablename","value":"string"},{"key":"offset","value":"string"}]
fileMaxSplitSize=120
regexPathFilter=.+TEST.csv
incorrectRegexPathFilter=/tZY
filePluginOutputFolder=file-plugin-output
skipHeaderTrue=true
fileSinkPathSuffix=yyyy-MM-dd-HH-mm-ss
enableQuotedValuesTrue=true
fileSourceOverrideSchema=[{"key":"createddate","value":"datetime"},{"key":"revenue","value":"double"},\
  {"key":"points","value":"decimal"},{"key":"BytesData","value":"bytes"}]
csvAllDataTypeOutputFile=testdata/file/expected_outputs/CSV_DATATYPE_TEST_1_OUTPUT.csv
outputForAllDataTypeTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_ALL_DATATYPE_TEST.csv
outputForTsvInputTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_TSV.csv
outputForTextInputTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_TEXT_FILE.csv
outputForPathFieldTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_PATHFIELD_TEST.csv
outputForOverrideTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_OVERRIDE_TEST.csv
outputForDelimitedTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_DELIMITED_TEST.csv
outputForRegexTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_REGEX_TEST.csv
outputForRecursiveTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_RECURSIVE_TEST.csv
outputForCSVInputTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_CSV_TEST.csv
outputForCSVDelimitedOutputTest=e2e-tests/file/expected_outputs/OUTPUT_FOR_CSV_DELIMITED_TEST.csv
tsvFormatOutput=e2e-tests/file/expected_outputs/TSV_OUTPUT.tsv
jsonFormatOutput=e2e-tests/file/expected_outputs/JSON_OUTPUT.json
orcFormatOutput=e2e-tests/file/expected_outputs/ORC_OUTPUT.orc
quotedValueCSVFile=testdata/file/QUOTED_VALUE_TEST.csv
quotedValueTSVFile=testdata/file/QUOTED_VALUE_TEST.tsv
quotedValueDelimitedFile=testdata/file/QUOTED_VALUE_TEST.txt
## FILE-PLUGIN-PROPERTIES-END

## NORMALIZE-PLUGIN-PROPERTIES-START
normalizeMappingField=test
normalizeAttributeType=AttributeType
normalizeGcsValidFieldsMapping=[{"key":"CustomerId","value":"ID"},{"key":"Purchase_Date","value":"Date"}]
normalizeGcsInvalidFieldsMapping=[{"key":"15","value":"test"}]
normalizeGcsValidOutputSchema=[{"key":"ID","value":"string"},{"key":"AttributeType","value":"string"},\
  {"key":"AttributeValue","value":"string"},{"key":"Date","value":"string"}]
normalizeGcsInvalidOutputSchema=[{"key":"ID","value":"string"}]
normalizeFieldsToBeNormalizedGCS=[{"key":"Item_ID#AttributeType","value":"AttributeValue"},\
  {"key":"Item_Cost#AttributeType","value":"AttributeValue"}]
normalizeInvalidFieldsToBeNormalizedGCS=[{"key":"normalizeTest#AttributeType","value":"AttributeValue"}]
normalizeBQValidOutputSchema=[{"key":"ID","value":"string"},{"key":"AttributeType","value":"string"},\
  {"key":"AttributeValue","value":"string"},{"key":"Date","value":"string"}]
normalizeFileValidFieldsMapping=[{"key":"id","value":"ID"},{"key":"createddate","value":"Date"}]
normalizeFieldsToBeNormalizedFile=[{"key":"revenue#AttributeType","value":"AttributeValue"},\
  {"key":"points#AttributeType","value":"AttributeValue"},{"key":"email#AttributeType","value":"AttributeValue"}]
normalizeCsvFile=testdata/file/CSV_Normalize_TEST.csv
normalizeCsvOutputFile=e2e-tests/expected_outputs/CSV_Normalize_TEST_Output.csv
normalizeCsvFileSchema=[{"key":"CustomerId","value":"string"},{"key":"Item_ID","value":"string"},\
  {"key":"Item_Cost","value":"double"},{"key":"Purchase_Date","value":"string"}]
normalizeCsvFileOutputSchema={ "type": "record", "name": "text", "fields": [ \
  { "name": "CustomerId", "type": "string" }, { "name": "Item_ID", "type": "string" }, \
  { "name": "Item_Cost", "type": "double" }, { "name": "Purchase_Date", "type": "string" } ] }
normalizeBQValidDatatypeOutputSchema=[{"key":"ID","value":"int"},{"key":"AttributeType","value":"string"},\
  {"key":"AttributeValue","value":"string"},{"key":"Date","value":"string"}]
normalizeCsvAllDataTypeFile=testdata/file/CSV_Normalize_TEST_1.csv
normalizeCsvAllDataTypeOutputFile=e2e-tests/expected_outputs/CSV_NormalizeOutput.csv
normalizeCsvAllDataTypeFileSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"isdeleted","value":"boolean"},{"key":"email","value":"string"},\
  {"key":"createddate","value":"string"},{"key":"revenue","value":"string"},{"key":"points","value":"string"},\
  {"key":"longdatatype","value":"string"},{"key":"doubledatatype","value":"double"},\
  {"key":"date","value":"string"},{"key":"null","value":"string"},{"key":"BytesData","value":"string"}]
writeHeaderTrue=true
## NORMALIZE-PLUGIN-PROPERTIES-END

## DISTINCT-PLUGIN-PROPERTIES-START
distinctInvalidFields=$^&*
distinctInvalidPartitions=&*^*
distinctInValidFieldNames=$^&*#%
distinctValidSingleFieldName=isdeleted
distinctFileCsvFile=testdata/file/CSV_DISTINCT_TEST.csv
distinctFileCsvOutputFile=testdata/file/expected_outputs/CSV_DISTINCT_TEST_OUTPUT.csv
distinctCsvFileSchema=[{"key":"user","value":"string"},{"key":"item","value":"string"},\
  {"key":"action","value":"string"},{"key":"timestamp","value":"string"}]
distinctValidMultipleFieldsNames=user, item, action
distinctCsvFileOutputSchema={ "type": "record", "name": "text", "fields": [ \
  { "name": "user", "type": "string" }, { "name": "item", "type": "string" }, \
  { "name": "action", "type": "string" }, { "name": "timestamp", "type": "string" } ] }
distinctOutputSchema=[{"key":"user","value":"string"},{"key":"item","value":"string"},\
  {"key":"action","value":"string"}]
distinctValidPartitions=1
distinctOutputFileSchema=[{"key":"isdeleted","value":"boolean"}]
distinctCsvAllDataTypeFile=testdata/file/CSV_DATATYPE_TEST_1.csv
distinctCsvAllDataTypeOutputFile=testdata/file/expected_outputs/CSV_DATATYPE_TEST_1_OUTPUT.csv
distinctCsvAllDataTypeFileSchema=[{"key":"id","value":"int"},{"key":"name","value":"string"},\
  {"key":"yearofbirth","value":"int"},{"key":"isdeleted","value":"boolean"},{"key":"email","value":"string"},\
  {"key":"createddate","value":"string"},{"key":"revenue","value":"string"},{"key":"points","value":"string"},\
  {"key":"longdatatype","value":"long"},{"key":"doubledatatype","value":"double"},\
  {"key":"BytesData","value":"string"}]
distinctDatatypeOutputFile=e2e-tests/expected_outputs/CSV_DISTINCT_TEST1_Output.csv
distinctCsvOutputFile=e2e-tests/expected_outputs/CSV_DISTINCT_TEST2_Output.csv
distinctMacroOutputFile=e2e-tests/expected_outputs/CSV_DISTINCT_TEST3_Output.csv
## DISTINCT-PLUGIN-PROPERTIES-END

## Deduplicate-PLUGIN-PROPERTIES-START
deduplicateFileCsvFile=testdata/file/CSV_DEDUP_TEST.csv
deduplicateFilterFunctionMax=Max
deduplicateFilterFunctionMin=Min
deduplicateFilterFunctionAny=Any
deduplicateFilterFunctionLast=Last
deduplicateFilterFunctionFirst=First
deduplicateFieldName=fname
deduplicateFilterOperation=cost:Max
deduplicateNumberOfPartitions=2
deduplicateInvalidNumberOfPartitions=@#$%
deduplicateFilterFieldName=cost
deduplicateUniqueFields=fname,lname
deduplicateOutputSchema=[{"key":"fname","value":"string"},{"key":"lname","value":"string"},{"key":"cost","value":"double"},{"key":"zipcode","value":"int"}]
deduplicateTest1OutputFile=e2e-tests/expected_outputs/CSV_DEDUPLICATE_TEST1_Output.csv
deduplicateTest2OutputFile=e2e-tests/expected_outputs/CSV_DEDUPLICATE_TEST2_Output.csv
deduplicateTest3OutputFile=e2e-tests/expected_outputs/CSV_DEDUPLICATE_TEST3_Output.csv
deduplicateMacroOutputFile=e2e-tests/expected_outputs/CSV_DEDUPLICATE_TEST4_Output.csv
deduplicateTest5OutputFile=e2e-tests/expected_outputs/CSV_DEDUPLICATE_TEST5_Output.csv
deduplicateTest6OutputFile=e2e-tests/expected_outputs/CSV_DEDUPLICATE_TEST6_Output.csv
## Deduplicate-PLUGIN-PROPERTIES-END

## GROUPBY-PLUGIN-PROPERTIES-START
groupByGcsCsvFile=testdata/file/CSV_GROUPBY_TEST.csv
groupByCsvDataTypeFileSchema=[{"key":"user","value":"string"}, {"key":"item","value":"string"},\
  {"key":"price","value":"double"}]
groupByValidFields=user, item
groupByValidFirstField=user
groupByValidSecondField=item
groupByGcsAggregateFields=[{"key":"price#Sum","value":"totalSpent"},{"key":"price#Count","value":"numPurchased"}]
groupByFileAggregateMultipleFields=[{"key":"price#Variance","value":"Variance"}, {"key":"price#Stddev",\
  "value":"StandardDeviation"}, {"key":"price#SumOfSquares","value":"SumOfSquares"}, {"key":"user#Concat",\
  "value":"Concat"}, {"key":"item#ConcatDistinct","value":"ConcatDistinct"}]
groupByFileAggregateFields=[{"key":"price#Avg","value":"Average"}, {"key":"price#Max","value":"MaximumValue"},\
  {"key":"price#Min","value":"MinimumValue"}, {"key":"user#CountDistinct","value":"distinctUser"}]
groupByGCSFieldsList=user, item
groupByAggregatesFields=distinctUser:CountDistinct(user),Average:Avg(price),MinimumValue:Min(price),MaximumValue:Max(price)
groupByInvalidFields=$^&*
groupByInvalidAggregateFields=[{"key":"$^&*#Count","value":"numPurchased"}]
groupByInvalidAggregatorFieldValue=$^&*
groupByNumberOfPartitions=2
groupByFunction=Sum
groupByTest1OutputFile=e2e-tests/expected_outputs/CSV_GROUPBY_TEST1_Output.csv
groupByTest2OutputFile=e2e-tests/expected_outputs/CSV_GROUPBY_TEST2_Output.csv
groupByTest3OutputFile=e2e-tests/expected_outputs/CSV_GROUPBY_TEST3_Output.csv
groupByMacroOutputFile=e2e-tests/expected_outputs/CSV_GROUPBY_TEST4_Output.csv
groupByFileAggregateMultipleSetFields1=[{"key":"price#MaxIf#price>=0.50","value":"MaxIfPrice"}, \
  {"key":"price#AvgIf#price>0.50","value":"AvgIfPrice"}, {"key":"price#SumIf#price>=0.50","value":"SumIfPrice"}, \
  {"key":"price#CountIf#price>=0.50","value":"CountIfPrice"},{"key":"price#AnyIf#price>0.6","value":"AnyIfPrice"}, \
  {"key":"price#MinIf#price>0.35","value":"MinIfPrice"}]
groupByFileAggregateMultipleSetFields2=[{"key":"price#Max","value":"MaxPrice"},\
  {"key":"price#Sum","value":"SumPrice"},{"key":"item#Count","value":"CountItem"}]
groupByTest5OutputFile=e2e-tests/expected_outputs/CSV_GROUPBY_TEST5_Output.csv
groupByTest6OutputFile=e2e-tests/expected_outputs/CSV_GROUPBY_TEST6_Output.csv
## GROUPBY-PLUGIN-PROPERTIES-END

## JOINER-PLUGIN-PROPERTIES-START
joinerCsvFileSecondInput=testdata/file/CSV_JOINER_TEST2.csv
joinerCsvFileFirstInput=testdata/file/CSV_JOINER_TEST1.csv
joinerCsvNullFileSecondInput=testdata/file/CSV_JOINER_NULLFILE2.csv
joinerCsvNullFileFirstInput=testdata/file/CSV_JOINER_NULLFILE1.csv
joinerCsvDataTypeFileSchema=[{"key":"customerid","value":"int"}, {"key":"item","value":"string"},\
  {"key":"price","value":"double"}]
joinerCsvFileFirstSchema=[{"key":"id","value":"int"}, {"key":"firstname","value":"string"},\
  {"key":"lastname","value":"string"}, {"key":"streetaddress","value":"string"}, {"key":"city","value":"string"}, \
  {"key":"state","value":"string"}, {"key":"zipcode","value":"string"}, {"key":"phonenumber","value":"string"}]
joinerCsvNullFileFirstSchema=[{"key":"purchase_id","value":"int"}, {"key":"customer_name","value":"string"},\
  {"key":"item","value":"string"}]
joinerCsvNullFileSecondSchema=[{"key":"customer_id","value":"int"}, {"key":"name","value":"string"}]
joinerFieldsList=File.purchase_id as purchase_id,File.customer_name as customer_name,File.item as item,File2.customer_id as customer_id,File2.name as name
joinerType=Inner
joinerInvalidPartitions=&*^*
joinerKeys=File.purchase_id = File2.customer_id
joinerInputMemory=File
joinerNullKeys=false
joinConditionSQLExpression=File.id = File2.customerid
joinerOutputSchema={ "type": "record", "name": "text", "fields": [ \
  { "name": "purchase_id", "type": "int" }, { "name": "customer_name", "type": "string" }, \
  { "name": "item", "type": "string" }, { "name": "customer_id", "type": "int" }, { "name": "name", "type": "string" } ] }
expectedOutputFilesBucketName=core-plugins
joinerTest1OutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST1_Output.csv
joinerTest2OutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST2_Output.csv
joinerTest3OutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST3_Output.csv
joinerTest4OutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST4_Output.csv
joinerMacroOutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST5_Output.csv
joinerTest6OutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST6_Output.csv
joinerTest7OutputFile=e2e-tests/expected_outputs/CSV_JOINER_TEST7_Output.csv

## JOINER-PLUGIN-PROPERTIES-END

## ERROR-COLLECTOR-PROPERTIES-START
errorMessageColumnName=errorMessage
errorCodeColumnName=errorCode
errorEmitterNodeName=errorEmitterNode
errorCollectorWranglerCondition=send-to-error workhours < 9 \nsend-to-error Salary > 40000
errorCollectorDefaultConfigOutput=e2e-tests/expected_outputs/CSV_ERROR_COLLECTOR_DEFAULT_CONFIG_Output.csv
errorCollectorCustomConfigOutput=e2e-tests/expected_outputs/CSV_ERROR_COLLECTOR_CUSTOM_CONFIG_Output.csv
## ERROR-COLLECTOR-PROPERTIES-END

## Test Setup Hooks for all modules ##
gcsDeduplicateTest=dummy
gcsDistinctTest1=dummy
gcsDistinctTest2=dummy
errorCollector1=dummy
groupByTest=dummy
joinerInputTest2=dummy
joinerInputTest1=dummy
joinerCsvNullFileInputTest1=dummy
joinerCsvNullFileInputTest2=dummy
normalizeTest1=dummy
csvTest=dummy
csvAllDataTypeTestFile=dummy
csvNoHeaderTestFile=dummy
tsvTestFile=dummy
textTestFile=dummy
pathFieldTestFiles=dummy
quotedValueCSVTestFiles=dummy
quotedValueTSVTestFiles=dummy
quotedValueDelimitedTestFiles=dummy
fileSinkTargetBucket=file-plugin-output
recursiveTest=dummy
testOnCdap=true
